Create complete code in a .NET Solution. in Visual Studio.
using C# and net9.0.
Write a compete solution that can be compiled and executed without additional coding required.

Create all Classes in separate files. 
Create all Interfaces in separate files. 
Create all Enumerations in separate files. 
Create all Records in separate files. 

Use minimal API for all code when possible.

Use only explicit Types.
use only Lower Camel Case for Local Variables.
Use only Upper Camel Case for Member Variables.
Use only Upper Camel Case for Class Properties.
Use only Upper Camel Case for Class Names.

Use only the Microsoft Basic Component Library.
Use only explicit Types.
Use only Fluent Interfaces if possible.
Use only LINQ if possible.
Use only 'foreach' statements in place of 'for' statements.
Use only streams for all I/O.

Use only the Microsoft's Unit Test framework.
Use only complex data as input in all Unit Tests.
Use Readonly Member Variables when possible.
Do not prefix member variables with an underscore.

Name all Local Variables, Member Variables, Properties, and Methods with complete nouns using the underlying type's name if possible. 
Name all Local Variables, Member Variables, Properties, and Methods with either a prefix or a postfix if the underlying noun needs more clarification.
Name all Classes and Interfaces with either a prefix or a postfix if the underlying noun needs more clarification.


Write all code for a business analyst or entry level programmer to read with comments for anything complex that might not be understood. 

------------------------------------------------------------------------------------------------------------------------------------------------


Create a Class Library to Lexer the Grammar listed below.

Generate a Lexer for the Abstract Syntax Tree.
Generate a Abstract Syntax Tree Pretty Printer.
Generate all nodes in the Abstract Syntaxes Tree.
Generate 25 Unit Tests for lexing the Abstract Syntax Tree.


Grammar:
	<program> ::= <stmt_list>
	<stmt_list> ::= <stmt> | <stmt> ";" <stmt_list>
	<stmt> ::= <assign_stmt> | <if_stmt> | <while_stmt> | <print_stmt>
	<assign_stmt> ::= <id> ":=" <expr>
	<if_stmt> ::= "if" <expr> "then" <stmt_list> "end"
	<while_stmt> ::= "while" <expr> "do" <stmt_list> "end"
	<print_stmt> ::= "print" <expr>
	<expr> ::= <term> | <term> "+" <expr> | <term> "-" <expr>
	<term> ::= <factor> | <factor> "*" <term> | <factor> "/" <term>
	<factor> ::= <id> | <number> | "(" <expr> ")"
	<id> ::= <letter> { <letter> | <digit> }
	<number> ::= <digit> { <digit> }
	<letter> ::= "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z"
	<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
